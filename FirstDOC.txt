Hi guys lets start coding

package com.ril.dip.tools.crypt.ssha;

import java.io.UnsupportedEncodingException;
import java.security.MessageDigest;
import java.security.NoSuchAlgorithmException;
import java.util.Arrays;

import com.ril.dip.tools.crypt.salt.SaltGenerator;
import org.apache.commons.codec.binary.Base64;

public class SSHA {

	public static final String HASH_METHOD_SSHA = "SSHA";
	public static final String HASH_METHOD_SHA = "SHA";
    public static final String HASH_METHOD_SSHA_PREFIX = "{" + HASH_METHOD_SSHA + "}";

    public static String digest(String passwordInPlainText) {
        byte[] saltByteArray = Arrays.copyOfRange(utf8encode(SaltGenerator.generate()), 0, 12);
        byte[] hash = digest(HASH_METHOD_SHA, passwordInPlainText, saltByteArray);
        return HASH_METHOD_SSHA_PREFIX + byteArrayToBase64String(join(hash, saltByteArray));
    }

    public static boolean verify(String passwordInPlainText, String encryptedPassword) {
        EncryptedPasswordParts encryptedPasswordParts = splitEncryptedPasswordIntoParts(encryptedPassword);
        byte[] hash = digest( HASH_METHOD_SHA, passwordInPlainText, encryptedPasswordParts.salt);
        return Arrays.equals(hash, encryptedPasswordParts.hashedPassword);
    }

    private static EncryptedPasswordParts splitEncryptedPasswordIntoParts(String password) {
        String hashMethod = password.substring(password.indexOf('{') + 1, password.indexOf('}'));
        String rest = password.substring(hashMethod.length() + 2);
        byte[] hashedPassword = new byte[20];
        byte[] hashedPasswordWithSalt = base64decodeToByteArray(rest);
        byte[] salt = new byte[hashedPasswordWithSalt.length - hashedPassword.length];
        split(hashedPasswordWithSalt, hashedPassword, salt);
        return EncryptedPasswordParts.of(hashMethod, hashedPassword, salt);
    }

	private static void split(byte[] all, byte[] left, byte[] right) {
		System.arraycopy(all, 0, left, 0, left.length);
		System.arraycopy(all, left.length, right, 0, right.length);
	}

    private static byte[] join(byte[] left, byte[] right) {
        byte[] result = new byte[32];
        System.arraycopy(left, 0, result, 0, left.length);
        System.arraycopy(right, 0, result, left.length, right.length);
        return result;
    }
	
    private static byte[] digest( String hashMethod, String password, byte[] salt) {
        byte[] passwordBytes = utf8encode(password);
        MessageDigest digest;
        try {
            digest = MessageDigest.getInstance(hashMethod);
        }
        catch (NoSuchAlgorithmException e1) {
            return null;
        }

        if ( salt != null ) {
            digest.update(passwordBytes);
            digest.update(salt);
            byte[] hashedPasswordBytes = digest.digest();
            return hashedPasswordBytes;
        } else {
            byte[] hashedPasswordBytes = digest.digest(passwordBytes);
            return hashedPasswordBytes;
        }
    }
    
	private static byte[] base64decodeToByteArray(String s) {
		return Base64.decodeBase64(utf8encode(s));
	}

    private static String byteArrayToBase64String(byte[] byteArray) {
        return Base64.encodeBase64String(byteArray);
    }
	
	private static byte[] utf8encode(String string) {
		try {
			return string.getBytes("UTF-8");
		} catch (UnsupportedEncodingException e) {
			return string.getBytes();
		}
	}

    private static class EncryptedPasswordParts {

        String hashMethod;
	    byte[] hashedPassword;
        byte[] salt;

        public static EncryptedPasswordParts of(String hashMethod, byte[] hashedPassword, byte[] salt) {
            EncryptedPasswordParts encryptedPasswordParts = new EncryptedPasswordParts();
            encryptedPasswordParts.hashMethod = hashMethod;
            encryptedPasswordParts.hashedPassword = hashedPassword;
            encryptedPasswordParts.salt = salt;
            return encryptedPasswordParts;
        }

    }
}
